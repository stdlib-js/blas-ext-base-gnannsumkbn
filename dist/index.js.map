{
  "version": 3,
  "sources": ["../lib/accessors.js", "../lib/ndarray.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar abs = require( '@stdlib/math-base-special-abs' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using an improved Kahan\u2013Babu\u0161ka algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan\u2013Babu\u0161ka algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift F\u00FCr Angewandte Mathematik Und Mechanik_ 54 (1): 39\u201351. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Object} out - output array object\n* @param {Collection} out.data - output array data\n* @param {Array<Function>} out.accessors - array element accessors\n* @param {integer} strideOut - stride length for `out`\n* @param {NonNegativeInteger} offsetOut - starting index for `out`\n* @returns {Object} output array object\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var arraylike2object = require( '@stdlib/array-base-arraylike2object' );\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var out = toAccessorArray( [ 0.0, 0 ] );\n*\n* var v = gnannsumkbn( 5, arraylike2object( x ), 2, 1, arraylike2object( out ), 1, 0 );\n* // returns {...}\n*/\nfunction gnannsumkbn( N, x, strideX, offsetX, out, strideOut, offsetOut ) {\n\tvar obuf;\n\tvar xbuf;\n\tvar xget;\n\tvar oset;\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar n;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\tobuf = out.data;\n\n\t// Cache reference to the element accessors:\n\txget = x.accessors[ 0 ];\n\toset = out.accessors[ 1 ];\n\n\tsum = 0.0;\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tv = xget( xbuf, ix );\n\t\tif ( isnan( v ) ) {\n\t\t\toset( obuf, offsetOut, sum );\n\t\t\toset( obuf, offsetOut+strideOut, 0 );\n\t\t\treturn out;\n\t\t}\n\t\toset( obuf, offsetOut, v * N );\n\t\toset( obuf, offsetOut+strideOut, N );\n\t\treturn out;\n\t}\n\tc = 0.0;\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = xget( xbuf, ix );\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc += (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc += (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\toset( obuf, offsetOut, sum + c );\n\toset( obuf, offsetOut+strideOut, n );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gnannsumkbn;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar arraylike2object = require( '@stdlib/array-base-arraylike2object' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar accessors = require( './accessors.js' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using an improved Kahan\u2013Babu\u0161ka algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan\u2013Babu\u0161ka algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift F\u00FCr Angewandte Mathematik Und Mechanik_ 54 (1): 39\u201351. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {NumericArray} out - output array\n* @param {integer} strideOut - stride length for `out`\n* @param {NonNegativeInteger} offsetOut - starting index for `out`\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n* var out = [ 0.0, 0 ];\n*\n* var v = gnannsumkbn( 5, x, 2, 1, out, 1, 0 );\n* // returns [ 5.0, 4 ]\n*/\nfunction gnannsumkbn( N, x, strideX, offsetX, out, strideOut, offsetOut ) {\n\tvar sum;\n\tvar ix;\n\tvar ox;\n\tvar oo;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar n;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\tout[ offsetOut ] = sum;\n\t\tout[ offsetOut+strideOut ] = 0;\n\t\treturn out;\n\t}\n\tox = arraylike2object( x );\n\too = arraylike2object( out );\n\tif ( ox.accessorProtocol || oo.accessorProtocol ) {\n\t\taccessors( N, ox, strideX, offsetX, oo, strideOut, offsetOut );\n\t\treturn out;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\tout[ offsetOut ] = sum;\n\t\t\tout[ offsetOut+strideOut ] = 0;\n\t\t\treturn out;\n\t\t}\n\t\tout[ offsetOut ] = x[ ix ] * N;\n\t\tout[ offsetOut+strideOut ] = N;\n\t\treturn out;\n\t}\n\tc = 0.0;\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc += (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc += (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\tout[ offsetOut ] = sum + c;\n\tout[ offsetOut+strideOut ] = n;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gnannsumkbn;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar stride2offset = require( '@stdlib/strided-base-stride2offset' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using an improved Kahan\u2013Babu\u0161ka algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan\u2013Babu\u0161ka algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift F\u00FCr Angewandte Mathematik Und Mechanik_ 54 (1): 39\u201351. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NumericArray} out - output array\n* @param {integer} strideOut - stride length for `out`\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n* var out = [ 0.0, 0 ];\n*\n* var v = gnannsumkbn( x.length, x, 1, out, 1 );\n* // returns [ 1.0, 3 ]\n*/\nfunction gnannsumkbn( N, x, strideX, out, strideOut ) {\n\tvar ix = stride2offset( N, strideX );\n\tvar io = stride2offset( 2, strideOut );\n\treturn ndarray( N, x, strideX, ix, out, strideOut, io );\n}\n\n\n// EXPORTS //\n\nmodule.exports = gnannsumkbn;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements, ignoring `NaN` values and using an improved Kahan\u2013Babu\u0161ka algorithm.\n*\n* @module @stdlib/blas-ext-base-gnannsumkbn\n*\n* @example\n* var gnannsumkbn = require( '@stdlib/blas-ext-base-gnannsumkbn' );\n*\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n* var out = [ 0.0, 0 ];\n*\n* var v = gnannsumkbn( x.length, x, 1, out, 1 );\n* // returns [ 1.0, 3 ]\n*\n* @example\n* var gnannsumkbn = require( '@stdlib/blas-ext-base-gnannsumkbn' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n* var out = [ 0.0, 0 ];\n*\n* var v = gnannsumkbn.ndarray( 5, x, 2, 1, out, 1, 0 );\n* // returns [ 5.0, 4 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_accessors", "__commonJSMin", "exports", "module", "isnan", "abs", "gnannsumkbn", "N", "x", "strideX", "offsetX", "out", "strideOut", "offsetOut", "obuf", "xbuf", "xget", "oset", "sum", "ix", "v", "t", "c", "n", "i", "require_ndarray", "__commonJSMin", "exports", "module", "arraylike2object", "isnan", "abs", "accessors", "gnannsumkbn", "N", "x", "strideX", "offsetX", "out", "strideOut", "offsetOut", "sum", "ix", "ox", "oo", "t", "n", "i", "require_main", "__commonJSMin", "exports", "module", "stride2offset", "ndarray", "gnannsumkbn", "N", "x", "strideX", "out", "strideOut", "ix", "io", "setReadOnly", "main", "ndarray"]
}
