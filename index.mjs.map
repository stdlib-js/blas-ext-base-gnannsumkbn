{"version":3,"file":"index.mjs","sources":["../lib/ndarray.js","../lib/accessors.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array-base-arraylike2object';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport abs from '@stdlib/math-base-special-abs';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {NumericArray} out - output array\n* @param {integer} strideOut - stride length for `out`\n* @param {NonNegativeInteger} offsetOut - starting index for `out`\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n* var out = [ 0.0, 0 ];\n*\n* var v = gnannsumkbn( 5, x, 2, 1, out, 1, 0 );\n* // returns [ 5.0, 4 ]\n*/\nfunction gnannsumkbn( N, x, strideX, offsetX, out, strideOut, offsetOut ) {\n\tvar sum;\n\tvar ix;\n\tvar ox;\n\tvar oo;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar n;\n\tvar i;\n\n\tsum = 0.0;\n\tif ( N <= 0 ) {\n\t\tout[ offsetOut ] = sum;\n\t\tout[ offsetOut+strideOut ] = 0;\n\t\treturn out;\n\t}\n\tox = arraylike2object( x );\n\too = arraylike2object( out );\n\tif ( ox.accessorProtocol || oo.accessorProtocol ) {\n\t\taccessors( N, ox, strideX, offsetX, oo, strideOut, offsetOut );\n\t\treturn out;\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tif ( isnan( x[ ix ] ) ) {\n\t\t\tout[ offsetOut ] = sum;\n\t\t\tout[ offsetOut+strideOut ] = 0;\n\t\t\treturn out;\n\t\t}\n\t\tout[ offsetOut ] = x[ ix ] * N;\n\t\tout[ offsetOut+strideOut ] = N;\n\t\treturn out;\n\t}\n\tc = 0.0;\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc += (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc += (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\tout[ offsetOut ] = sum + c;\n\tout[ offsetOut+strideOut ] = n;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default gnannsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport abs from '@stdlib/math-base-special-abs';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length for `x`\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Object} out - output array object\n* @param {Collection} out.data - output array data\n* @param {Array<Function>} out.accessors - array element accessors\n* @param {integer} strideOut - stride length for `out`\n* @param {NonNegativeInteger} offsetOut - starting index for `out`\n* @returns {Object} output array object\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import arraylike2object from '@stdlib/array-base-arraylike2object';\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var out = toAccessorArray( [ 0.0, 0 ] );\n*\n* var v = gnannsumkbn( 5, arraylike2object( x ), 2, 1, arraylike2object( out ), 1, 0 );\n* // returns {...}\n*/\nfunction gnannsumkbn( N, x, strideX, offsetX, out, strideOut, offsetOut ) {\n\tvar obuf;\n\tvar xbuf;\n\tvar xget;\n\tvar oset;\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar t;\n\tvar c;\n\tvar n;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\tobuf = out.data;\n\n\t// Cache reference to the element accessors:\n\txget = x.accessors[ 0 ];\n\toset = out.accessors[ 1 ];\n\n\tsum = 0.0;\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\tv = xget( xbuf, ix );\n\t\tif ( isnan( v ) ) {\n\t\t\toset( obuf, offsetOut, sum );\n\t\t\toset( obuf, offsetOut+strideOut, 0 );\n\t\t\treturn out;\n\t\t}\n\t\toset( obuf, offsetOut, v * N );\n\t\toset( obuf, offsetOut+strideOut, N );\n\t\treturn out;\n\t}\n\tc = 0.0;\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = xget( xbuf, ix );\n\t\tif ( isnan( v ) === false ) {\n\t\t\tt = sum + v;\n\t\t\tif ( abs( sum ) >= abs( v ) ) {\n\t\t\t\tc += (sum-t) + v;\n\t\t\t} else {\n\t\t\t\tc += (v-t) + sum;\n\t\t\t}\n\t\t\tsum = t;\n\t\t\tn += 1;\n\t\t}\n\t\tix += strideX;\n\t}\n\toset( obuf, offsetOut, sum + c );\n\toset( obuf, offsetOut+strideOut, n );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default gnannsumkbn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements, ignoring `NaN` values and using an improved Kahan–Babuška algorithm.\n*\n* ## Method\n*\n* -   This implementation uses an \"improved Kahan–Babuška algorithm\", as described by Neumaier (1974).\n*\n* ## References\n*\n* -   Neumaier, Arnold. 1974. \"Rounding Error Analysis of Some Methods for Summing Finite Sums.\" _Zeitschrift Für Angewandte Mathematik Und Mechanik_ 54 (1): 39–51. doi:[10.1002/zamm.19740540106](https://doi.org/10.1002/zamm.19740540106).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length for `x`\n* @param {NumericArray} out - output array\n* @param {integer} strideOut - stride length for `out`\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n* var out = [ 0.0, 0 ];\n*\n* var v = gnannsumkbn( x.length, x, 1, out, 1 );\n* // returns [ 1.0, 3 ]\n*/\nfunction gnannsumkbn( N, x, strideX, out, strideOut ) {\n\tvar ix = stride2offset( N, strideX );\n\tvar io = stride2offset( 2, strideOut );\n\treturn ndarray( N, x, strideX, ix, out, strideOut, io );\n}\n\n\n// EXPORTS //\n\nexport default gnannsumkbn;\n"],"names":["gnannsumkbn","N","x","strideX","offsetX","out","strideOut","offsetOut","sum","ix","ox","oo","v","t","c","n","i","arraylike2object","accessorProtocol","obuf","xbuf","xget","oset","data","accessors","isnan","abs","ndarray","stride2offset"],"mappings":";;6YAyDA,SAASA,EAAaC,EAAGC,EAAGC,EAASC,EAASC,EAAKC,EAAWC,GAC7D,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAGJ,GADAR,EAAM,EACDP,GAAK,EAGT,OAFAI,EAAKE,GAAcC,EACnBH,EAAKE,EAAUD,GAAc,EACtBD,EAIR,GAFAK,EAAKO,EAAkBf,GACvBS,EAAKM,EAAkBZ,GAClBK,EAAGQ,kBAAoBP,EAAGO,iBAE9B,OCfF,SAAsBjB,EAAGC,EAAGC,EAASC,EAASC,EAAKC,EAAWC,GAC7D,IAAIY,EACAC,EACAC,EACAC,EACAd,EACAC,EACAG,EACAC,EACAC,EACAC,EACAC,EAYJ,GATAI,EAAOlB,EAAEqB,KACTJ,EAAOd,EAAIkB,KAGXF,EAAOnB,EAAEsB,UAAW,GACpBF,EAAOjB,EAAImB,UAAW,GAEtBhB,EAAM,EACNC,EAAKL,EACY,IAAZD,EAEJ,OADAS,EAAIS,EAAMD,EAAMX,GACXgB,EAAOb,IACXU,EAAMH,EAAMZ,EAAWC,GACvBc,EAAMH,EAAMZ,EAAUD,EAAW,GAC1BD,IAERiB,EAAMH,EAAMZ,EAAWK,EAAIX,GAC3BqB,EAAMH,EAAMZ,EAAUD,EAAWL,GAC1BI,GAIR,IAFAS,EAAI,EACJC,EAAI,EACEC,EAAI,EAAGA,EAAIf,EAAGe,IACnBJ,EAAIS,EAAMD,EAAMX,IACI,IAAfgB,EAAOb,KACXC,EAAIL,EAAMI,EACLc,EAAKlB,IAASkB,EAAKd,GACvBE,GAAMN,EAAIK,EAAKD,EAEfE,GAAMF,EAAEC,EAAKL,EAEdA,EAAMK,EACNE,GAAK,GAENN,GAAMN,EAEPmB,EAAMH,EAAMZ,EAAWC,EAAMM,GAC7BQ,EAAMH,EAAMZ,EAAUD,EAAWS,EAElC,CDvCES,CAAWvB,EAAGS,EAAIP,EAASC,EAASO,EAAIL,EAAWC,GAC5CF,EAGR,GADAI,EAAKL,EACY,IAAZD,EACJ,OAAKsB,EAAOvB,EAAGO,KACdJ,EAAKE,GAAcC,EACnBH,EAAKE,EAAUD,GAAc,EACtBD,IAERA,EAAKE,GAAcL,EAAGO,GAAOR,EAC7BI,EAAKE,EAAUD,GAAcL,EACtBI,GAIR,IAFAS,EAAI,EACJC,EAAI,EACEC,EAAI,EAAGA,EAAIf,EAAGe,IACnBJ,EAAIV,EAAGO,IACa,IAAfgB,EAAOb,KACXC,EAAIL,EAAMI,EACLc,EAAKlB,IAASkB,EAAKd,GACvBE,GAAMN,EAAIK,EAAKD,EAEfE,GAAMF,EAAEC,EAAKL,EAEdA,EAAMK,EACNE,GAAK,GAENN,GAAMN,EAIP,OAFAE,EAAKE,GAAcC,EAAMM,EACzBT,EAAKE,EAAUD,GAAcS,EACtBV,CACR,CEzDA,SAASL,EAAaC,EAAGC,EAAGC,EAASE,EAAKC,GAGzC,OAAOqB,EAAS1B,EAAGC,EAAGC,EAFbyB,EAAe3B,EAAGE,GAEQE,EAAKC,EAD/BsB,EAAe,EAAGtB,GAE5B"}